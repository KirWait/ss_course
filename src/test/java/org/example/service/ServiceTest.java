package org.example.service;

import javassist.NotFoundException;
import org.example.entity.ProjectEntity;
import org.example.entity.ReleaseEntity;
import org.example.entity.TaskEntity;
import org.example.entity.UserEntity;
import org.example.enumeration.Active;
import org.example.enumeration.Roles;
import org.example.enumeration.Status;
import org.example.enumeration.Type;
import org.example.exception.InvalidStatusException;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.GregorianCalendar;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;

@RunWith(SpringRunner.class)
@SpringBootTest
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class ServiceTest {
/*
* This test emulating life-time of a whole project on the service level:
* 1)User and customer registration
* 2)Creating new project
* 3)Optional:creation and deletion of a release
* 4)Creation of the task along with release
* 5)Attempt to change task status while project is only in BACKLOG -> exception is thrown
* 6)Changing project status to IN_PROGRESS
* 7)Changing task status to IN_PROGRESS
* 8)Attempt to change project status to DONE while there are unfinished tasks
* 9)Changing task status to DONE
* 10)Changing project status to DONE
* 11)Attempt to create a new task -> exception is thrown
* 12)Attempt to create a new release -> exception is thrown
* 13)Cascade deletion of all entities created during the test
* */
    @Autowired
    private TaskService taskService;

    @Autowired
    private ProjectService projectService;

    @Autowired
    private ReleaseService releaseService;

    @Autowired
    private UserService userService;

    //USER DETAILS
    private final String USER_USERNAME = "USER_USERNAME";
    private final String USER_PASSWORD = "PASSWORD";
    private final Roles USER_ROLES = Roles.ROLE_ADMIN;
    private final Active USER_ACTIVE = Active.ACTIVE;

    //CUSTOMER DETAILS
    private final String CUSTOMER_USERNAME = "CUSTOMER_USERNAME";
    private final String CUSTOMER_PASSWORD = "PASSWORD";
    private final Roles CUSTOMER_ROLES = Roles.ROLE_USER;
    private final Active CUSTOMER_ACTIVE = Active.ACTIVE;

    //PROJECT DETAILS
    private final String PROJECT_NAME = "PROJECT_NAME";
    private final Status PROJECT_STATUS = Status.BACKLOG;
    private final boolean PROJECT_PAID = true;
    private final Long PROJECT_PRICE = 100000L;

    //RELEASE DETAILS
    private final String RELEASE_CREATION_TIME = Constants.formatterWithTime.format(new GregorianCalendar().getTime());
    private final String RELEASE_END_TIME = "2022-12-31";
    private final String RELEASE_VERSION = "1.0.0";

    //TASK DETAILS
    private final Status TASK_STATUS = Status.BACKLOG;
    private final String TASK_NAME = "TASK_NAME";
    private final String TASK_DESCRIPTION = "DESCRIPTION";
    private final Type TASK_TYPE = Type.BUG;
    private final String TASK_CREATION_TIME = Constants.formatterWithTime.format(new GregorianCalendar().getTime());

    //ENTITIES
    private final UserEntity USER = new UserEntity(USER_USERNAME, USER_PASSWORD, USER_ROLES, USER_ACTIVE);

    private final UserEntity CUSTOMER = new UserEntity(CUSTOMER_USERNAME, CUSTOMER_PASSWORD, CUSTOMER_ROLES, CUSTOMER_ACTIVE);

    private final ReleaseEntity RELEASE = new ReleaseEntity(RELEASE_CREATION_TIME, RELEASE_END_TIME, RELEASE_VERSION);

    private final TaskEntity TASK = new TaskEntity(TASK_STATUS, TASK_NAME,TASK_DESCRIPTION, RELEASE, TASK_TYPE, TASK_CREATION_TIME);

    private final ProjectEntity PROJECT = new ProjectEntity(PROJECT_NAME,PROJECT_PRICE, PROJECT_PAID, PROJECT_STATUS);
    //ALL ID'S ARE AUTOGENERATED

    @Test
    @Order(1)
    public void registerShouldSaveUserAndCustomer() throws NotFoundException {

        assertThrows(NotFoundException.class, () -> userService.findByUsername(USER_USERNAME));

        assertThrows(NotFoundException.class, () -> userService.findByUsername(CUSTOMER_USERNAME));

        userService.register(USER);

        userService.register(CUSTOMER);

        UserEntity userAfterRegistration = userService.findByUsername(USER_USERNAME);

        assertThat(userAfterRegistration).isNotNull();

        assertThat(userAfterRegistration.getUsername()).isEqualTo(USER_USERNAME);

        UserEntity customerAfterRegistration = userService.findByUsername(CUSTOMER_USERNAME);

        assertThat(customerAfterRegistration).isNotNull();

        assertThat(customerAfterRegistration.getUsername()).isEqualTo(CUSTOMER_USERNAME);
    }

    @Test
    @Order(2)
    public void saveProjectShouldSaveProject() throws NotFoundException {

        assertThrows(NotFoundException.class, () -> projectService.findByProjectName(PROJECT_NAME));

        UserEntity customer = userService.findByUsername(CUSTOMER_USERNAME);

        PROJECT.setCustomer(customer);

        projectService.save(PROJECT);

        ProjectEntity savedProject = projectService.findByProjectName(PROJECT_NAME);

        assertThat(savedProject).isNotNull();

        assertThat(savedProject.getName()).isEqualTo(PROJECT_NAME);

    }

    @Test
    @Order(3)
    public void saveAndReleaseShouldSaveReleaseAndDelete() throws NotFoundException {

        ProjectEntity project = projectService.findByProjectName(PROJECT_NAME);

        assertThrows(NotFoundException.class, () -> releaseService.findByVersionAndProjectId(RELEASE_VERSION, project.getId()));

        RELEASE.setProject(project);

        releaseService.save(RELEASE);

        ReleaseEntity savedRelease = releaseService.findByVersionAndProjectId(RELEASE_VERSION, project.getId());

        assertThat(savedRelease).isNotNull();

        assertThat(savedRelease.getVersion()).isEqualTo(RELEASE_VERSION);

        releaseService.delete(savedRelease.getId());

        assertThrows(NotFoundException.class, () -> releaseService.findByVersionAndProjectId(RELEASE_VERSION, project.getId()));
    }


    @Test
    @Order(4)
    public void saveReleaseShouldSaveRelease() throws NotFoundException {

        ProjectEntity project = projectService.findByProjectName(PROJECT_NAME);

        assertThrows(NotFoundException.class, ()-> releaseService.findByVersionAndProjectId(RELEASE_VERSION, project.getId()));

        RELEASE.setProject(project);

        releaseService.save(RELEASE);

        ReleaseEntity savedRelease = releaseService.findByVersionAndProjectId(RELEASE_VERSION, project.getId());

        assertThat(savedRelease).isNotNull();

        assertThat(savedRelease.getVersion()).isEqualTo(RELEASE_VERSION);
    }


    @Test
    @Order(5)
    public void saveTaskShouldSaveTask() throws NotFoundException {

        ProjectEntity project = projectService.findByProjectName(PROJECT_NAME);

        Long userId = userService.findByUsername(USER_USERNAME).getId();

        assertThrows(NotFoundException.class, () -> taskService.findByName(TASK_NAME));

        TASK.setProject(project);

        TASK.setResponsible(new UserEntity(userId));

        TASK.setAuthor(new UserEntity(userId));

        TASK.setRelease(releaseService.findByVersionAndProjectId(RELEASE_VERSION, project.getId()));

        taskService.save(TASK);

        TaskEntity savedTask = taskService.findByName(TASK_NAME);

        assertThat(savedTask).isNotNull();

        assertThat(savedTask.getRelease().getVersion()).isEqualTo(RELEASE_VERSION);
    }

    @Test
    @Order(6)
    public void changeTaskStatusToInProgressShouldThrowInvalidStatusException() {

        assertThrows(InvalidStatusException.class, () -> projectService.isProjectAvailableToChangeTaskStatus(projectService.findByProjectName(PROJECT_NAME).getId()));
    }
    @Test
    @Order(7)
    public void changeProjectStatusToInProgressShouldChangeStatus() throws NotFoundException {

        ProjectEntity project = projectService.findByProjectName(PROJECT_NAME);

        Long projectId = project.getId();

        assertThat(project.getStatus()).isEqualTo(Status.BACKLOG);

        projectService.changeStatus(projectId);

        ProjectEntity updatedProject = projectService.findByProjectName(PROJECT_NAME);

        assertThat(updatedProject.getStatus()).isEqualTo(Status.IN_PROGRESS);
    }
    @Test
    @Order(8)
    public void isProjectAvailableToChangeTaskStatusShouldReturnTrueAndTaskShouldChangeStatusToInProgressAndSetStartTime() throws NotFoundException {

        assertThat(projectService.isProjectAvailableToChangeTaskStatus(projectService.findByProjectName(PROJECT_NAME).getId())).isTrue();

        taskService.changeStatus(taskService.findByName(TASK_NAME).getId());

        TaskEntity updatedTask = taskService.findByName(TASK_NAME);

        assertThat(updatedTask.getStatus()).isEqualTo(Status.IN_PROGRESS);

        assertThat(updatedTask.getStartTime()).isNotNull();

    }

    @Test
    @Order(9)
    public void projectChangeStatusOrThrowExceptionShouldThrowException() {
        assertThrows(InvalidStatusException.class, () -> projectService.changeStatus(projectService.findByProjectName(PROJECT_NAME).getId()));
    }

    @Test
    @Order(10)
    public void isProjectAvailableToChangeTaskStatusShouldReturnTrueAndTaskShouldChangeStatusToDoneAndSetEndTime() throws NotFoundException {
        assertThat(projectService.isProjectAvailableToChangeTaskStatus(projectService.findByProjectName(PROJECT_NAME).getId())).isTrue();

        taskService.changeStatus(taskService.findByName(TASK_NAME).getId());

        TaskEntity updatedTask = taskService.findByName(TASK_NAME);

        assertThat(updatedTask.getStatus()).isEqualTo(Status.DONE);

        assertThat(updatedTask.getEndTime()).isNotNull();
    }

    @Test
    @Order(11)
    public void projectChangeStatusOrThrowExceptionShouldChangeStatusToDone() throws NotFoundException {

        projectService.changeStatus(projectService.findByProjectName(PROJECT_NAME).getId());

        ProjectEntity updatedProject = projectService.findByProjectName(PROJECT_NAME);

        assertThat(updatedProject.getStatus()).isEqualTo(Status.DONE);

    }

    @Test
    @Order(12)
    public void ifProjectAvailableToCreateTaskOrThrowExceptionShouldThrowInvalidStatusException() {

        assertThrows(InvalidStatusException.class, () -> projectService.ifProjectAvailableToCreateTaskOrThrowException(projectService.findByProjectName(PROJECT_NAME).getId()));
    }

    @Test
    @Order(13)
    public void createReleaseShouldThrowInvalidStatusException() {

        assertThrows(InvalidStatusException.class, () -> projectService.ifProjectAvailableToCreateReleaseOrThrowException(projectService.findByProjectName(PROJECT_NAME).getId()));
    }

    @Test
    @Order(14)
    public void deleteSavedShouldCascadeDeleteSaved() throws NotFoundException {


        userService.delete(userService.findByUsername(USER_USERNAME).getId());

        userService.delete(userService.findByUsername(CUSTOMER_USERNAME).getId());

        assertThrows(NotFoundException.class, () -> userService.findByUsername(USER_USERNAME));

        assertThrows(NotFoundException.class, () -> userService.findByUsername(CUSTOMER_USERNAME));

        assertThrows(NotFoundException.class, () -> projectService.findByProjectName(PROJECT_NAME));
    }
}






