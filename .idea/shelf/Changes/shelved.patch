Index: src/main/java/org/example/entities/enums/UserStatus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/entities/enums/UserStatus.java b/src/main/java/org/example/entities/enums/UserStatus.java
new file mode 100644
--- /dev/null	(date 1635510016617)
+++ b/src/main/java/org/example/entities/enums/UserStatus.java	(date 1635510016617)
@@ -0,0 +1,5 @@
+package org.example.entities.enums;
+
+public enum UserStatus {
+    ACTIVE, NOT_ACTIVE
+}
Index: src/main/java/org/example/services/ProjectService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/services/ProjectService.java b/src/main/java/org/example/services/ProjectService.java
new file mode 100644
--- /dev/null	(date 1635598962562)
+++ b/src/main/java/org/example/services/ProjectService.java	(date 1635598962562)
@@ -0,0 +1,15 @@
+package org.example.services;
+
+import javassist.NotFoundException;
+import org.example.entities.ProjectEntity;
+
+import java.util.List;
+
+public interface ProjectService {
+    void save(ProjectEntity projectEntity);
+    void changeStatus(Long id) throws Exception;
+    List<ProjectEntity> getAll();
+    ProjectEntity findById(Long id);
+    void delete(Long id);
+
+}
Index: src/main/java/org/example/repositories/ProjectRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/repositories/ProjectRepository.java b/src/main/java/org/example/repositories/ProjectRepository.java
new file mode 100644
--- /dev/null	(date 1635595924216)
+++ b/src/main/java/org/example/repositories/ProjectRepository.java	(date 1635595924216)
@@ -0,0 +1,10 @@
+package org.example.repositories;
+
+import org.example.entities.ProjectEntity;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface ProjectRepository extends JpaRepository<ProjectEntity, Long> {
+
+}
Index: src/main/java/org/example/controllers/AdminController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/controllers/AdminController.java b/src/main/java/org/example/controllers/AdminController.java
new file mode 100644
--- /dev/null	(date 1635595550633)
+++ b/src/main/java/org/example/controllers/AdminController.java	(date 1635595550633)
@@ -0,0 +1,17 @@
+package org.example.controllers;
+
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping("/admin")
+public class AdminController {
+
+//    @GetMapping
+//    public ResponseEntity viewAll(){
+//
+//    }
+
+}
Index: src/main/java/org/example/DTOs/TaskRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/DTOs/TaskRequestDto.java b/src/main/java/org/example/DTOs/TaskRequestDto.java
new file mode 100644
--- /dev/null	(date 1635607079788)
+++ b/src/main/java/org/example/DTOs/TaskRequestDto.java	(date 1635607079788)
@@ -0,0 +1,117 @@
+package org.example.DTOs;
+
+import org.example.entities.TaskEntity;
+import org.example.entities.TaskVersionEntity;
+import org.example.entities.enums.Status;
+import org.example.entities.enums.TaskType;
+
+import java.util.List;
+
+
+public class TaskRequestDto {
+
+    private Long id;
+
+    private Long projectId;
+
+    private String status;
+
+    private String name;
+
+    private String description;
+
+    private Long authorId;
+
+    private Long responsibleId;
+
+    private List<TaskVersionEntity> version;
+
+    private String type;
+
+    public TaskEntity convertToTaskEntity(){
+        TaskEntity taskEntity = new TaskEntity();
+        taskEntity.setId(id);
+        taskEntity.setProjectId(projectId);
+        taskEntity.setStatus(Status.valueOf(status));
+        taskEntity.setName(name);
+        taskEntity.setDescription(description);
+        taskEntity.setAuthorId(authorId);
+        taskEntity.setResponsibleId(responsibleId);
+        taskEntity.setVersion(version);
+        taskEntity.setType(TaskType.valueOf(type));
+
+        return taskEntity;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public Long getProjectId() {
+        return projectId;
+    }
+
+    public void setProjectId(Long projectId) {
+        this.projectId = projectId;
+    }
+
+    public String getStatus() {
+        return status;
+    }
+
+    public void setStatus(String status) {
+        this.status = status;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public Long getAuthorId() {
+        return authorId;
+    }
+
+    public void setAuthorId(Long authorId) {
+        this.authorId = authorId;
+    }
+
+    public Long getResponsibleId() {
+        return responsibleId;
+    }
+
+    public void setResponsibleId(Long responsibleId) {
+        this.responsibleId = responsibleId;
+    }
+
+    public List<TaskVersionEntity> getVersion() {
+        return version;
+    }
+
+    public void setVersion(List<TaskVersionEntity> version) {
+        this.version = version;
+    }
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+}
Index: src/main/java/org/example/entities/TaskVersionEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/entities/TaskVersionEntity.java b/src/main/java/org/example/entities/TaskVersionEntity.java
new file mode 100644
--- /dev/null	(date 1635622398220)
+++ b/src/main/java/org/example/entities/TaskVersionEntity.java	(date 1635622398220)
@@ -0,0 +1,61 @@
+package org.example.entities;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+
+import javax.persistence.*;
+import java.util.Date;
+
+@Entity
+@Table(name = "versions")
+public class TaskVersionEntity {
+    public TaskVersionEntity() {
+    }
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Column(name = "task_version_id")
+    private Long id;
+
+    @JsonIgnore
+    @Column(name = "start_time")
+    private Date start_time;
+
+    @JsonIgnore
+    @Column(name = "end_time")
+    private Date end_time;
+
+    @Column(name = "version")
+    private String version;
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public Date getStart_time() {
+        return start_time;
+    }
+
+    public void setStart_time(Date start_time) {
+        this.start_time = start_time;
+    }
+
+    public Date getEnd_time() {
+        return end_time;
+    }
+
+    public void setEnd_time(Date end_time) {
+        this.end_time = end_time;
+    }
+
+    public String getVersion() {
+        return version;
+    }
+
+    public void setVersion(String version) {
+        this.version = version;
+    }
+}
Index: src/main/java/org/example/repositories/TaskRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/repositories/TaskRepository.java b/src/main/java/org/example/repositories/TaskRepository.java
new file mode 100644
--- /dev/null	(date 1635498696122)
+++ b/src/main/java/org/example/repositories/TaskRepository.java	(date 1635498696122)
@@ -0,0 +1,9 @@
+package org.example.repositories;
+
+import org.example.entities.TaskEntity;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface TaskRepository extends JpaRepository<TaskEntity, Long> {
+}
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
new file mode 100644
--- /dev/null	(date 1635530277109)
+++ b/src/main/resources/application.properties	(date 1635530277109)
@@ -0,0 +1,9 @@
+spring.datasource.url=jdbc:postgresql://localhost:5432/ss_practice
+spring.datasource.username=postgres
+spring.datasource.password =12345
+spring.datasource.driver-class-name=org.postgresql.Driver
+
+jwt.token.secret=jwtappdemo
+jwt.token.expired=3600000
+
+server.port=8080
\ No newline at end of file
Index: src/main/java/org/example/entities/TaskEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/entities/TaskEntity.java b/src/main/java/org/example/entities/TaskEntity.java
new file mode 100644
--- /dev/null	(date 1635607286270)
+++ b/src/main/java/org/example/entities/TaskEntity.java	(date 1635607286270)
@@ -0,0 +1,149 @@
+package org.example.entities;
+
+import org.example.DTOs.TaskRequestDto;
+import org.example.entities.enums.Status;
+import org.example.entities.enums.TaskType;
+
+import javax.persistence.*;
+import java.util.List;
+
+
+@Entity
+@Table(name = "tasks")
+public class TaskEntity {
+
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long task_id;
+
+    @Column(name = "project_id")
+    private Long projectId;
+
+    @Column(name = "status")
+    @Enumerated(EnumType.STRING)
+    private Status status;
+
+    @Column(name = "name")
+    private String name;
+
+    @Column(name = "description")
+    private String description;
+
+    @Column(name = "author_id")
+    private Long authorId;
+
+    @Column(name = "responsible_id")
+    private Long responsibleId;
+
+    @OneToMany(cascade = CascadeType.ALL)
+    @JoinColumn(name = "task_id")
+    private List<TaskVersionEntity> version;
+
+
+    @Column(name = "type")
+    @Enumerated(EnumType.STRING)
+    private TaskType taskType;
+
+
+
+
+    public TaskRequestDto convertToTaskDto(){
+        TaskRequestDto taskRequestDto = new TaskRequestDto();
+        taskRequestDto.setId(task_id);
+        taskRequestDto.setProjectId(projectId);
+        taskRequestDto.setStatus(status.name());
+        taskRequestDto.setName(name);
+        taskRequestDto.setDescription(description);
+        taskRequestDto.setAuthorId(authorId);
+        taskRequestDto.setResponsibleId(responsibleId);
+        taskRequestDto.setVersion(version);
+        taskRequestDto.setType(taskType.name());
+
+        return taskRequestDto;
+    }
+
+    public void setVersion(List<TaskVersionEntity> version) {
+        this.version = version;
+    }
+
+    public TaskType getTaskType() {
+        return taskType;
+    }
+
+    public void setTaskType(TaskType taskType) {
+        this.taskType = taskType;
+    }
+
+    public Long getId() {
+        return task_id;
+    }
+
+    public void setId(Long id) {
+        this.task_id = id;
+    }
+
+    public Long getProjectId() {
+        return projectId;
+    }
+
+    public void setProjectId(Long projectId) {
+        this.projectId = projectId;
+    }
+
+    public Status getStatus() {
+        return status;
+    }
+
+    public void setStatus(Status status) {
+        this.status = status;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public Long getAuthorId() {
+        return authorId;
+    }
+
+    public void setAuthorId(Long authorId) {
+        this.authorId = authorId;
+    }
+
+    public Long getResponsibleId() {
+        return responsibleId;
+    }
+
+    public void setResponsibleId(Long responsibleId) {
+        this.responsibleId = responsibleId;
+    }
+
+    public List<TaskVersionEntity> getVersionDto() {
+        return version;
+    }
+
+    public void setVersionDto(List<TaskVersionEntity> version) {
+        this.version = version;
+    }
+
+    public TaskType getType() {
+        return taskType;
+    }
+
+    public void setType(TaskType taskType) {
+        this.taskType = taskType;
+    }
+}
Index: src/main/java/org/example/entities/enums/TaskType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/entities/enums/TaskType.java b/src/main/java/org/example/entities/enums/TaskType.java
new file mode 100644
--- /dev/null	(date 1635596581097)
+++ b/src/main/java/org/example/entities/enums/TaskType.java	(date 1635596581097)
@@ -0,0 +1,5 @@
+package org.example.entities.enums;
+
+public enum TaskType {
+    TESTING, BUG, DEVELOPMENT
+}
Index: src/main/java/org/example/entities/enums/Status.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/entities/enums/Status.java b/src/main/java/org/example/entities/enums/Status.java
new file mode 100644
--- /dev/null	(date 1635596581078)
+++ b/src/main/java/org/example/entities/enums/Status.java	(date 1635596581078)
@@ -0,0 +1,5 @@
+package org.example.entities.enums;
+
+public enum Status {
+    BACKLOG, IN_PROGRESS, DONE
+}
Index: src/main/java/org/example/services/impl/TaskVersionServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/services/impl/TaskVersionServiceImpl.java b/src/main/java/org/example/services/impl/TaskVersionServiceImpl.java
new file mode 100644
--- /dev/null	(date 1635600320671)
+++ b/src/main/java/org/example/services/impl/TaskVersionServiceImpl.java	(date 1635600320671)
@@ -0,0 +1,28 @@
+package org.example.services.impl;
+
+import org.example.entities.TaskVersionEntity;
+import org.example.repositories.TaskVersionRepository;
+import org.example.services.TaskVersionService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+@Service
+public class TaskVersionServiceImpl implements TaskVersionService {
+
+    private final TaskVersionRepository taskVersionRepository;
+
+    public TaskVersionServiceImpl(TaskVersionRepository taskVersionRepository) {
+        this.taskVersionRepository = taskVersionRepository;
+    }
+
+    @Override
+    public List<TaskVersionEntity> findByTaskId(Long id) {
+        return taskVersionRepository.findAllById(List.of(id));
+    }
+
+    @Override
+    public void save(TaskVersionEntity version) {
+        taskVersionRepository.save(version);
+    }
+}
Index: src/main/java/org/example/services/TaskVersionService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/services/TaskVersionService.java b/src/main/java/org/example/services/TaskVersionService.java
new file mode 100644
--- /dev/null	(date 1635599948142)
+++ b/src/main/java/org/example/services/TaskVersionService.java	(date 1635599948142)
@@ -0,0 +1,10 @@
+package org.example.services;
+
+import org.example.entities.TaskVersionEntity;
+
+import java.util.List;
+
+public interface TaskVersionService {
+    List<TaskVersionEntity> findByTaskId(Long id);
+    void save(TaskVersionEntity version);
+}
Index: src/main/java/org/example/repositories/TaskVersionRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/repositories/TaskVersionRepository.java b/src/main/java/org/example/repositories/TaskVersionRepository.java
new file mode 100644
--- /dev/null	(date 1635599948148)
+++ b/src/main/java/org/example/repositories/TaskVersionRepository.java	(date 1635599948148)
@@ -0,0 +1,10 @@
+package org.example.repositories;
+
+import org.example.entities.TaskVersionEntity;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface TaskVersionRepository extends JpaRepository<TaskVersionEntity, Long> {
+
+}
Index: src/main/java/org/example/controllers/AuthenticationController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/controllers/AuthenticationController.java b/src/main/java/org/example/controllers/AuthenticationController.java
new file mode 100644
--- /dev/null	(date 1635595550640)
+++ b/src/main/java/org/example/controllers/AuthenticationController.java	(date 1635595550640)
@@ -0,0 +1,57 @@
+package org.example.controllers;
+
+import org.example.DTOs.AuthenticationRequestDto;
+import org.example.entities.UserEntity;
+import org.example.security.jwt.JwtTokenProvider;
+import org.example.services.UserService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.ResponseEntity;
+import org.springframework.security.authentication.AuthenticationManager;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.HashMap;
+import java.util.Map;
+
+@RestController
+public class AuthenticationController {
+
+    private final AuthenticationManager authenticationManager;
+
+    private final JwtTokenProvider jwtTokenProvider;
+
+    private final UserService userService;
+
+    @Autowired
+    public AuthenticationController(AuthenticationManager authenticationManager, JwtTokenProvider jwtTokenProvider, UserService userService) {
+        this.authenticationManager = authenticationManager;
+        this.jwtTokenProvider = jwtTokenProvider;
+        this.userService = userService;
+    }
+
+    @PostMapping("/login")
+    public ResponseEntity login(@RequestBody AuthenticationRequestDto requestDto) {
+        System.out.println(requestDto.getUserName() + " " + requestDto.getPassword());
+
+            String username = requestDto.getUserName();
+
+            authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, requestDto.getPassword()));
+            UserEntity user = userService.findByUsername(username);
+
+            if (user == null) {
+
+                throw new UsernameNotFoundException("User with username: " + username + " not found");
+            }
+
+            String token = jwtTokenProvider.createToken(username, user.getRoles());
+
+            Map<Object, Object> response = new HashMap<>();
+            response.put("username", username);
+            response.put("token", token);
+
+            return ResponseEntity.ok(response);
+
+    }
+}
+
Index: src/main/java/org/example/services/impl/ProjectServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/services/impl/ProjectServiceImpl.java b/src/main/java/org/example/services/impl/ProjectServiceImpl.java
new file mode 100644
--- /dev/null	(date 1635599948132)
+++ b/src/main/java/org/example/services/impl/ProjectServiceImpl.java	(date 1635599948132)
@@ -0,0 +1,59 @@
+package org.example.services.impl;
+
+import javassist.NotFoundException;
+import org.example.entities.ProjectEntity;
+import org.example.entities.enums.Status;
+import org.example.repositories.ProjectRepository;
+import org.example.services.ProjectService;
+import org.springframework.stereotype.Service;
+
+import javax.transaction.Transactional;
+import java.util.List;
+
+@Service
+@Transactional
+public class ProjectServiceImpl implements ProjectService {
+
+    private final ProjectRepository projectRepository;
+
+    public ProjectServiceImpl(ProjectRepository projectRepository) {
+        this.projectRepository = projectRepository;
+    }
+
+    @Override
+    public void save(ProjectEntity projectEntity) {
+        projectRepository.save(projectEntity);
+
+    }
+
+    @Override
+    public void changeStatus(Long id) throws Exception {
+        ProjectEntity pe = projectRepository.findById(id).orElseThrow(() -> new NotFoundException("No such projects"));
+        if (pe.getStatus() == Status.DONE) {
+            throw new Exception("The project has already been done!");
+        }
+        if (pe.getStatus() == Status.IN_PROGRESS) {
+            pe.setStatus(Status.DONE);
+        }
+        if (pe.getStatus() == Status.BACKLOG) {
+            pe.setStatus(Status.IN_PROGRESS);
+        }
+
+        projectRepository.save(pe);
+    }
+
+    @Override
+    public List<ProjectEntity> getAll() {
+        return projectRepository.findAll();
+    }
+
+    @Override
+    public ProjectEntity findById(Long id) {
+        return projectRepository.findById(id).orElse(null);
+    }
+
+    @Override
+    public void delete(Long id) {
+        projectRepository.deleteById(id);
+    }
+}
Index: src/main/java/org/example/DTOs/AuthenticationRequestDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/DTOs/AuthenticationRequestDto.java b/src/main/java/org/example/DTOs/AuthenticationRequestDto.java
new file mode 100644
--- /dev/null	(date 1635527643148)
+++ b/src/main/java/org/example/DTOs/AuthenticationRequestDto.java	(date 1635527643148)
@@ -0,0 +1,22 @@
+package org.example.DTOs;
+
+public class AuthenticationRequestDto {
+    String userName;
+    String password;
+
+    public String getUserName() {
+        return userName;
+    }
+
+    public void setUserName(String userName) {
+        this.userName = userName;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+}
Index: src/main/java/org/example/services/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/services/UserService.java b/src/main/java/org/example/services/UserService.java
new file mode 100644
--- /dev/null	(date 1635590847397)
+++ b/src/main/java/org/example/services/UserService.java	(date 1635590847397)
@@ -0,0 +1,18 @@
+package org.example.services;
+
+import org.example.entities.UserEntity;
+
+import java.util.List;
+
+public interface UserService {
+
+    UserEntity register(UserEntity user);
+
+    List<UserEntity> getAll();
+
+    UserEntity findByUsername(String username);
+
+    UserEntity findById(Long id);
+
+    void delete(Long id);
+}
Index: src/main/java/org/example/security/JwtUserDetailsService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/security/JwtUserDetailsService.java b/src/main/java/org/example/security/JwtUserDetailsService.java
new file mode 100644
--- /dev/null	(date 1635590847378)
+++ b/src/main/java/org/example/security/JwtUserDetailsService.java	(date 1635590847378)
@@ -0,0 +1,30 @@
+package org.example.security;
+
+import org.example.security.jwt.JwtFactory;
+import org.example.security.jwt.JwtUser;
+import org.example.services.UserService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.stereotype.Service;
+
+@Service
+public class JwtUserDetailsService implements UserDetailsService {
+
+    private final UserService userService;
+    @Autowired
+    public JwtUserDetailsService(UserService userService){
+        this.userService = userService;
+    }
+
+
+
+    @Override
+    public UserDetails loadUserByUsername(String userName) throws UsernameNotFoundException {
+
+        JwtUser jwtUser = JwtFactory.create(userService.findByUsername(userName));
+        
+        return jwtUser;
+    }
+}
Index: src/main/java/org/example/repositories/UserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/repositories/UserRepository.java b/src/main/java/org/example/repositories/UserRepository.java
new file mode 100644
--- /dev/null	(date 1635589796343)
+++ b/src/main/java/org/example/repositories/UserRepository.java	(date 1635589796343)
@@ -0,0 +1,10 @@
+package org.example.repositories;
+
+import org.example.entities.UserEntity;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface UserRepository extends JpaRepository<UserEntity, Long> {
+    UserEntity findByUserName(String userName);
+}
Index: src/main/java/org/example/services/impl/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/services/impl/UserServiceImpl.java b/src/main/java/org/example/services/impl/UserServiceImpl.java
new file mode 100644
--- /dev/null	(date 1635599948136)
+++ b/src/main/java/org/example/services/impl/UserServiceImpl.java	(date 1635599948136)
@@ -0,0 +1,61 @@
+package org.example.services.impl;
+
+import org.example.entities.UserEntity;
+import org.example.entities.enums.Roles;
+import org.example.entities.enums.UserStatus;
+import org.example.repositories.UserRepository;
+import org.example.services.UserService;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.stereotype.Service;
+
+import javax.transaction.Transactional;
+import java.util.List;
+
+
+
+@Service
+@Transactional
+public class UserServiceImpl implements UserService {
+
+    private final UserRepository userRepository;
+    private final BCryptPasswordEncoder passwordEncoder;
+
+
+    public UserServiceImpl(UserRepository userRepository, BCryptPasswordEncoder passwordEncoder) {
+        this.userRepository = userRepository;
+        this.passwordEncoder = passwordEncoder;
+    }
+    @Override
+    public UserEntity register(UserEntity user) {
+
+
+
+        user.setPassword(passwordEncoder.encode(user.getPassword()));
+        user.setRoles(Roles.ROLE_USER);
+        user.setStatus(UserStatus.ACTIVE);
+
+        UserEntity registeredUser = userRepository.save(user);
+
+
+        return registeredUser;
+    }
+    @Override
+    public List<UserEntity> getAll() {
+        return userRepository.findAll();
+    }
+
+    @Override
+    public UserEntity findByUsername(String username) {
+        return userRepository.findByUserName(username);
+    }
+
+    @Override
+    public UserEntity findById(Long id) {
+        return userRepository.findById(id).orElse(null);
+    }
+
+    @Override
+    public void delete(Long id) {
+    userRepository.deleteById(id);
+    }
+}
Index: src/main/java/org/example/security/jwt/JwtFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/security/jwt/JwtFactory.java b/src/main/java/org/example/security/jwt/JwtFactory.java
new file mode 100644
--- /dev/null	(date 1635595924222)
+++ b/src/main/java/org/example/security/jwt/JwtFactory.java	(date 1635595924222)
@@ -0,0 +1,27 @@
+package org.example.security.jwt;
+
+
+import org.example.entities.UserEntity;
+import org.example.entities.enums.UserStatus;
+import org.springframework.security.core.authority.SimpleGrantedAuthority;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+public class JwtFactory {
+
+    public static JwtUser create(UserEntity userEntity){
+        JwtUser jwtUser = new JwtUser(
+                userEntity.getUser_id(),
+                userEntity.getUserName(),
+                userEntity.getPassword(),
+                userEntity.getStatus().equals(UserStatus.ACTIVE),
+                List.of(userEntity.getRoles().name()).stream()
+                        .map(SimpleGrantedAuthority::new)
+                        .collect(Collectors.toList()));
+        System.out.println(userEntity.getRoles().name());
+        System.out.println(List.of(userEntity.getRoles().name()));
+
+        return jwtUser;
+    }
+}
Index: src/main/java/org/example/configuration/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/configuration/SecurityConfig.java b/src/main/java/org/example/configuration/SecurityConfig.java
new file mode 100644
--- /dev/null	(date 1635594151280)
+++ b/src/main/java/org/example/configuration/SecurityConfig.java	(date 1635594151280)
@@ -0,0 +1,51 @@
+package org.example.configuration;
+
+import org.example.security.jwt.JwtConfigurer;
+import org.example.security.jwt.JwtTokenProvider;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.security.authentication.AuthenticationManager;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
+import org.springframework.security.config.http.SessionCreationPolicy;
+
+@Configuration
+public class SecurityConfig extends WebSecurityConfigurerAdapter {
+
+    private final JwtTokenProvider jwtTokenProvider;
+
+    private static final String ADMIN_ENDPOINT = "/admin/**";
+    private static final String USER_ENDPOINT = "/user/**";
+    private static final String CUSTOMER_ENDPOINT = "/customer/**";
+    private static final String LOGIN_ENDPOINT = "/login";
+
+    @Autowired
+    public SecurityConfig(JwtTokenProvider jwtTokenProvider) {
+        this.jwtTokenProvider = jwtTokenProvider;
+    }
+
+    @Bean
+    @Override
+    public AuthenticationManager authenticationManagerBean() throws Exception {
+        return super.authenticationManagerBean();
+    }
+
+    @Override
+    protected void configure(HttpSecurity http) throws Exception {
+        http
+                .httpBasic().disable()
+                .csrf().disable()
+                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
+                .and()
+                .authorizeRequests()
+                .antMatchers(LOGIN_ENDPOINT).permitAll()
+                .antMatchers(ADMIN_ENDPOINT).hasRole("ADMIN")
+                .antMatchers(USER_ENDPOINT).hasRole("USER")
+                .antMatchers(CUSTOMER_ENDPOINT).hasRole("CUSTOMER")
+                .anyRequest().authenticated()
+                .and()
+                .apply(new JwtConfigurer(jwtTokenProvider));
+    }
+}
\ No newline at end of file
Index: src/main/java/org/example/entities/enums/Roles.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/entities/enums/Roles.java b/src/main/java/org/example/entities/enums/Roles.java
new file mode 100644
--- /dev/null	(date 1635594151275)
+++ b/src/main/java/org/example/entities/enums/Roles.java	(date 1635594151275)
@@ -0,0 +1,5 @@
+package org.example.entities.enums;
+
+public enum Roles {
+    ROLE_USER, ROLE_ADMIN, ROLE_CUSTOMER
+}
Index: src/main/java/org/example/entities/UserEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/entities/UserEntity.java b/src/main/java/org/example/entities/UserEntity.java
new file mode 100644
--- /dev/null	(date 1635595924208)
+++ b/src/main/java/org/example/entities/UserEntity.java	(date 1635595924208)
@@ -0,0 +1,71 @@
+package org.example.entities;
+
+
+import org.example.entities.enums.Roles;
+import org.example.entities.enums.UserStatus;
+
+import javax.persistence.*;
+
+@Entity
+@Table(name = "users")
+public class UserEntity {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Column(name = "user_id")
+    private Long user_id;
+
+    @Column(name = "user_name")
+    private String userName;
+
+    @Column(name = "password")
+    private String password;
+
+    @Column(name = "roles")
+    @Enumerated(value = EnumType.STRING)
+    private Roles roles;
+
+    @Column(name = "status")
+    @Enumerated(value = EnumType.STRING)
+    private UserStatus status;
+
+    public Long getUser_id() {
+        return user_id;
+    }
+
+    public void setUser_id(Long user_id) {
+        this.user_id = user_id;
+    }
+
+    public String getUserName() {
+        return userName;
+    }
+
+    public void setUserName(String userName) {
+        this.userName = userName;
+    }
+
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public Roles getRoles() {
+        return roles;
+    }
+
+    public void setRoles(Roles roles) {
+        this.roles = roles;
+    }
+
+    public UserStatus getStatus() {
+        return status;
+    }
+
+    public void setStatus(UserStatus status) {
+        this.status = status;
+    }
+}
Index: src/main/java/org/example/entities/ProjectEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/entities/ProjectEntity.java b/src/main/java/org/example/entities/ProjectEntity.java
new file mode 100644
--- /dev/null	(date 1635596581114)
+++ b/src/main/java/org/example/entities/ProjectEntity.java	(date 1635596581114)
@@ -0,0 +1,58 @@
+package org.example.entities;
+
+
+import org.example.entities.enums.Status;
+
+import javax.persistence.*;
+
+@Entity
+@Table(name = "project")
+public class ProjectEntity {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Column(name = "project_id")
+    private Long project_id;
+
+    @Column(name = "project_name")
+    private String project_name;
+
+    @Column(name = "customer_id")
+    private Long customer_id;
+
+    @Column(name = "status")
+    @Enumerated(value = EnumType.STRING)
+    private Status status;
+
+    public Status getStatus() {
+        return status;
+    }
+
+    public void setStatus(Status status) {
+        this.status = status;
+    }
+
+    public Long getProject_id() {
+        return project_id;
+    }
+
+    public void setProject_id(Long project_id) {
+        this.project_id = project_id;
+    }
+
+    public String getProject_name() {
+        return project_name;
+    }
+
+    public void setProject_name(String project_name) {
+        this.project_name = project_name;
+    }
+
+    public Long getCustomer_id() {
+        return customer_id;
+    }
+
+    public void setCustomer_id(Long customer_id) {
+        this.customer_id = customer_id;
+    }
+}
Index: src/main/java/org/example/security/jwt/JwtUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/security/jwt/JwtUser.java b/src/main/java/org/example/security/jwt/JwtUser.java
new file mode 100644
--- /dev/null	(date 1635590847390)
+++ b/src/main/java/org/example/security/jwt/JwtUser.java	(date 1635590847390)
@@ -0,0 +1,74 @@
+package org.example.security.jwt;
+
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.userdetails.UserDetails;
+
+import java.util.Collection;
+
+public class JwtUser implements UserDetails {
+
+    private final Long id;
+    private final String username;
+    private final String password;
+    private final boolean enabled;
+    private final Collection<? extends GrantedAuthority> authorities;
+
+    public JwtUser(Long id,
+                   String username,
+                   String password,
+                   boolean enabled,
+                   Collection<? extends GrantedAuthority> authorities
+    )
+    {
+        this.id = id;
+        this.username = username;
+        this.password = password;
+        this.enabled = enabled;
+        this.authorities = authorities;
+    }
+
+
+    @JsonIgnore
+    public Long getId() {
+        return id;
+    }
+
+    @Override
+    public Collection<? extends GrantedAuthority> getAuthorities() {
+        return authorities;
+    }
+
+    @JsonIgnore
+    @Override
+    public String getPassword() {
+        return password;
+    }
+
+    @Override
+    public String getUsername() {
+        return username;
+    }
+    @JsonIgnore
+    @Override
+    public boolean isAccountNonExpired() {
+        return true;
+    }
+    @JsonIgnore
+    @Override
+    public boolean isAccountNonLocked() {
+        return true;
+    }
+    @JsonIgnore
+    @Override
+    public boolean isCredentialsNonExpired() {
+        return true;
+    }
+
+    @Override
+    public boolean isEnabled() {
+        return enabled;
+    }
+}
Index: src/main/java/org/example/security/jwt/JwtAuthenticationException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/security/jwt/JwtAuthenticationException.java b/src/main/java/org/example/security/jwt/JwtAuthenticationException.java
new file mode 100644
--- /dev/null	(date 1635532169583)
+++ b/src/main/java/org/example/security/jwt/JwtAuthenticationException.java	(date 1635532169583)
@@ -0,0 +1,13 @@
+package org.example.security.jwt;
+
+import org.springframework.security.core.AuthenticationException;
+
+public class JwtAuthenticationException extends AuthenticationException {
+    public JwtAuthenticationException(String msg, Throwable t) {
+        super(msg, t);
+    }
+
+    public JwtAuthenticationException(String msg) {
+        super(msg);
+    }
+}
Index: src/main/java/org/example/security/jwt/JwtConfigurer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/security/jwt/JwtConfigurer.java b/src/main/java/org/example/security/jwt/JwtConfigurer.java
new file mode 100644
--- /dev/null	(date 1635532169577)
+++ b/src/main/java/org/example/security/jwt/JwtConfigurer.java	(date 1635532169577)
@@ -0,0 +1,20 @@
+package org.example.security.jwt;
+
+import org.springframework.security.config.annotation.SecurityConfigurerAdapter;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.web.DefaultSecurityFilterChain;
+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
+
+public class JwtConfigurer extends SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSecurity> {
+    private JwtTokenProvider jwtTokenProvider;
+
+    public JwtConfigurer(JwtTokenProvider jwtTokenProvider) {
+        this.jwtTokenProvider = jwtTokenProvider;
+    }
+
+    @Override
+    public void configure(HttpSecurity httpSecurity) throws Exception {
+        JwtTokenFilter jwtTokenFilter = new JwtTokenFilter(jwtTokenProvider);
+        httpSecurity.addFilterBefore(jwtTokenFilter, UsernamePasswordAuthenticationFilter.class);
+    }
+}
Index: src/main/java/org/example/DTOs/TaskResponseDto.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/DTOs/TaskResponseDto.java b/src/main/java/org/example/DTOs/TaskResponseDto.java
new file mode 100644
--- /dev/null	(date 1635607175523)
+++ b/src/main/java/org/example/DTOs/TaskResponseDto.java	(date 1635607175523)
@@ -0,0 +1,111 @@
+package org.example.DTOs;
+
+import org.example.entities.TaskEntity;
+import org.example.entities.TaskVersionEntity;
+
+import java.util.List;
+
+public class TaskResponseDto {
+    private Long id;
+
+    private Long projectId;
+
+    private String status;
+
+    private String name;
+
+    private String description;
+
+    private Long authorId;
+
+    private Long responsibleId;
+
+    private List<TaskVersionEntity> version;
+
+    private String type;
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public Long getProjectId() {
+        return projectId;
+    }
+
+    public void setProjectId(Long projectId) {
+        this.projectId = projectId;
+    }
+
+    public String getStatus() {
+        return status;
+    }
+
+    public void setStatus(String status) {
+        this.status = status;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public Long getAuthorId() {
+        return authorId;
+    }
+
+    public void setAuthorId(Long authorId) {
+        this.authorId = authorId;
+    }
+
+    public Long getResponsibleId() {
+        return responsibleId;
+    }
+
+    public void setResponsibleId(Long responsibleId) {
+        this.responsibleId = responsibleId;
+    }
+
+    public List<TaskVersionEntity> getVersion() {
+        return version;
+    }
+
+    public void setVersion(List<TaskVersionEntity> version) {
+        this.version = version;
+    }
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    public TaskResponseDto(TaskEntity taskEntity)
+    {
+        this.id = taskEntity.getId();
+        this.projectId = taskEntity.getProjectId();
+        this.status = taskEntity.getStatus().name();
+        this.name = taskEntity.getName();
+        this.description = taskEntity.getDescription();
+        this.authorId = taskEntity.getAuthorId();
+        this.responsibleId = taskEntity.getResponsibleId();
+        this.version = taskEntity.getVersionDto();
+        this.type = taskEntity.getType().name();
+    }
+}
Index: src/main/java/org/example/security/jwt/JwtTokenProvider.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/security/jwt/JwtTokenProvider.java b/src/main/java/org/example/security/jwt/JwtTokenProvider.java
new file mode 100644
--- /dev/null	(date 1635590017515)
+++ b/src/main/java/org/example/security/jwt/JwtTokenProvider.java	(date 1635590017515)
@@ -0,0 +1,93 @@
+package org.example.security.jwt;
+
+import io.jsonwebtoken.*;
+import org.example.entities.enums.Roles;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Bean;
+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
+import org.springframework.stereotype.Component;
+
+import javax.annotation.PostConstruct;
+import javax.servlet.http.HttpServletRequest;
+import java.util.ArrayList;
+import java.util.Base64;
+import java.util.Date;
+import java.util.List;
+
+@Component
+public class JwtTokenProvider {
+
+    @Autowired
+    private UserDetailsService userDetailsService;
+
+    @Value("${jwt.token.secret}")
+    private String secret;
+
+    @Value("${jwt.token.expired}")
+    private long validityInMillis;
+
+
+    @Bean
+    public BCryptPasswordEncoder passwordEncoder() {
+        return new BCryptPasswordEncoder();
+    }
+
+    @PostConstruct
+    protected void init() {
+        secret = Base64.getEncoder().encodeToString(secret.getBytes());
+    }
+
+    public String createToken(String username, Roles roles) {
+
+        Claims claims = Jwts.claims().setSubject(username);
+        claims.put("roles", roles.name());
+
+        Date now = new Date();
+        Date validity = new Date(now.getTime() + validityInMillis);
+
+        return Jwts.builder()
+                .setClaims(claims)
+                .setIssuedAt(now)
+                .setExpiration(validity)
+                .signWith(SignatureAlgorithm.HS256, secret)
+                .compact();
+    }
+
+    public Authentication getAuthentication(String token) {
+        UserDetails userDetails = this.userDetailsService.loadUserByUsername(getUsername(token));
+        return new UsernamePasswordAuthenticationToken(userDetails, "", userDetails.getAuthorities());
+    }
+
+    public String getUsername(String token) {
+        return Jwts.parser().setSigningKey(secret).parseClaimsJws(token).getBody().getSubject();
+    }
+
+    public String resolveToken(HttpServletRequest req) {
+        String bearerToken = req.getHeader("Authorization");
+        if (bearerToken != null && bearerToken.startsWith("Bearer_")) {
+            return bearerToken.substring(7, bearerToken.length());
+        }
+        return null;
+    }
+
+    public boolean validateToken(String token) throws JwtAuthenticationException {
+        try {
+            Jws<Claims> claims = Jwts.parser().setSigningKey(secret).parseClaimsJws(token);
+
+            if (claims.getBody().getExpiration().before(new Date())) {
+                return false;
+            }
+
+            return true;
+        } catch (JwtException | IllegalArgumentException e) {
+            throw new JwtAuthenticationException("JWT token is expired or invalid");
+        }
+    }
+
+
+}
Index: src/main/java/org/example/security/jwt/JwtTokenFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/security/jwt/JwtTokenFilter.java b/src/main/java/org/example/security/jwt/JwtTokenFilter.java
new file mode 100644
--- /dev/null	(date 1635536672528)
+++ b/src/main/java/org/example/security/jwt/JwtTokenFilter.java	(date 1635536672528)
@@ -0,0 +1,35 @@
+package org.example.security.jwt;
+
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.web.filter.GenericFilterBean;
+
+import javax.servlet.FilterChain;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+import java.io.IOException;
+
+public class JwtTokenFilter extends GenericFilterBean {
+
+    private JwtTokenProvider jwtTokenProvider;
+
+    public JwtTokenFilter(JwtTokenProvider jwtTokenProvider) {
+        this.jwtTokenProvider = jwtTokenProvider;
+    }
+
+    @Override
+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
+            throws IOException, ServletException {
+        String token = jwtTokenProvider.resolveToken((HttpServletRequest) servletRequest);
+        if (token != null && jwtTokenProvider.validateToken(token)) {
+            Authentication auth = jwtTokenProvider.getAuthentication(token);
+
+            if (auth != null) {
+                SecurityContextHolder.getContext().setAuthentication(auth);
+            }
+        }
+        filterChain.doFilter(servletRequest, servletResponse);
+    }
+}
